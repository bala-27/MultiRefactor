======== Search Information ========
Search: Genetic Algorithm
Generations: 100
Population Size: 50
Crossover Probability: 0.200000
Mutation Probability: 0.800000

======== Initial Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.448718
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.491422
Average amount of methods per class: 4.320513
Average amount of complexity of methods per class: 18.064102
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.741569
Overall fitness function score: 0.000000

======== Applied Refactorings ========
Iteration 1: "Decrease Method Security" applied at class SymmetricDifference to method SymmetricDifference from private to package
Iteration 2: "Remove Method" applied at class BinaryPredicates to method And
Iteration 3: "Decrease Method Security" applied at class FindPosition to method FindPosition from private to package
Iteration 4: "Decrease Method Security" applied at class CountIfNot to method CountIfNot from private to package
Iteration 5: "Make Method Non Static" applied at class Generators to method IntegerSequence
Iteration 6: "Decrease Method Security" applied at class MapFactory to method Builder from private to package
Iteration 7: "Decrease Method Security" applied at class RemoveIf to method RemoveIf from private to package
Iteration 8: "Make Method Non Static" applied at class Bind to method Second
Iteration 9: "Decrease Method Security" applied at class SkippingIterator to method findNext from private to package
Iteration 10: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from private to package
Iteration 11: "Make Method Static" applied at class Bind to method Second

Score has improved overall by 0.046668
Time taken to refactor: 117.91s

======== Final Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.448718
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.491052
Average amount of methods per class: 4.307693
Average amount of complexity of methods per class: 18.012821
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.741499
Overall fitness function score: 0.046668