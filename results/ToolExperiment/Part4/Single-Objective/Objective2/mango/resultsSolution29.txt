======== Search Information ========
Search: Genetic Algorithm
Generations: 100
Population Size: 50
Crossover Probability: 0.200000
Mutation Probability: 0.800000

======== Initial Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.448718
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.491422
Average amount of methods per class: 4.320513
Average amount of complexity of methods per class: 18.064102
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.741569
Overall fitness function score: 0.000000

======== Applied Refactorings ========
Iteration 1: "Decrease Method Security" applied at class Partition to method Partition from private to package
Iteration 2: "Make Field Final" applied at class SkippingIterator to LocalVariableDeclaration candidate
Iteration 3: "Make Field Non Final" applied at class Iterators to ParameterDeclaration generator
Iteration 4: "Decrease Method Security" applied at class Partition to method Partition from package to protected
Iteration 5: "Remove Method" applied at class Functions to method Constant
Iteration 6: "Remove Method" applied at class Generators to method NullSequence
Iteration 7: "Decrease Method Security" applied at class Collections to method Collections from private to package
Iteration 8: "Decrease Method Security" applied at class Partition to method Partition from protected to public
Iteration 9: "Decrease Method Security" applied at class FindPosition to method FindPosition from private to package
Iteration 10: "Decrease Method Security" applied at class RemoveIf to method RemoveIf from private to package
Iteration 11: "Decrease Method Security" applied at class RemoveIf to method RemoveIf from package to protected
Iteration 12: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from private to package
Iteration 13: "Make Method Non Static" applied at class Predicates to method True
Iteration 14: "Decrease Method Security" applied at class FindPosition to method FindPosition from package to protected
Iteration 15: "Make Field Non Final" applied at class Bind to ParameterDeclaration c
Iteration 16: "Decrease Method Security" applied at class Collections to method Collections from package to protected
Iteration 17: "Decrease Method Security" applied at class Collections to method Collections from protected to public
Iteration 18: "Decrease Method Security" applied at class FindIfNot to method FindIfNot from private to package
Iteration 19: "Remove Method" applied at class Algorithms to method unique
Iteration 20: "Make Field Static" applied at class Or to field p1_
Iteration 21: "Decrease Method Security" applied at class Count to method execute_null from private to package
Iteration 22: "Decrease Method Security" applied at class ForEach to method ForEach from private to package
Iteration 23: "Remove Method" applied at class Bind to method Second
Iteration 24: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from package to protected
Iteration 25: "Decrease Method Security" applied at class CountIfNot to method CountIfNot from private to package
Iteration 26: "Decrease Method Security" applied at class MapFactory to method Builder from private to package
Iteration 27: "Increase Method Security" applied at class TeeIterator to method get from public to protected
Iteration 28: "Decrease Method Security" applied at class ForEach to method ForEach from package to protected
Iteration 29: "Remove Method" applied at class Collections to method list
Iteration 30: "Remove Method" applied at class Collections to method map

Score has improved overall by 0.038237
Time taken to refactor: 117.91s

======== Final Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.448718
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.496343
Average amount of methods per class: 4.243590
Average amount of complexity of methods per class: 17.769230
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.745947
Overall fitness function score: 0.038237