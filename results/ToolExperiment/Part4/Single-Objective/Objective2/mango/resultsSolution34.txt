======== Search Information ========
Search: Genetic Algorithm
Generations: 100
Population Size: 50
Crossover Probability: 0.200000
Mutation Probability: 0.800000

======== Initial Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.448718
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.491422
Average amount of methods per class: 4.320513
Average amount of complexity of methods per class: 18.064102
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.741569
Overall fitness function score: 0.000000

======== Applied Refactorings ========
Iteration 1: "Make Method Non Static" applied at class Helpers to method toIterator
Iteration 2: "Decrease Method Security" applied at class Collections to method Collections from private to package
Iteration 3: "Decrease Method Security" applied at class FindIf to method FindIf from private to package
Iteration 4: "Increase Field Security" applied at class TeeIterator to field item from public to protected
Iteration 5: "Decrease Method Security" applied at class MapFactory to method Builder from private to package
Iteration 6: "Decrease Method Security" applied at class Transform to method Transform from private to package
Iteration 7: "Decrease Method Security" applied at class MapFactory to method Builder from package to protected
Iteration 8: "Decrease Method Security" applied at class Iterators to method Iterators from private to package
Iteration 9: "Decrease Method Security" applied at class MapFactory to method Builder from protected to public
Iteration 10: "Decrease Method Security" applied at class Remove to method Remove from private to package
Iteration 11: "Decrease Method Security" applied at class FindIfNot to method FindIfNot from private to package
Iteration 12: "Decrease Method Security" applied at class RemoveIf to method RemoveIf from private to package
Iteration 13: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from private to package
Iteration 14: "Increase Method Security" applied at class Algorithms to method countIf from public to protected
Iteration 15: "Make Class Final" applied to class TeeIterator
Iteration 16: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from package to protected
Iteration 17: "Remove Method" applied at class Algorithms to method unique
Iteration 18: "Decrease Method Security" applied at class BoundedIterator to method listIterator from package to protected
Iteration 19: "Make Method Non Static" applied at class Bind to method First
Iteration 20: "Decrease Method Security" applied at class Count to method execute_null from private to package
Iteration 21: "Decrease Method Security" applied at class FindPositionIf to method FindPositionIf from protected to public
Iteration 22: "Increase Method Security" applied at class Adapt to method Method from public to protected
Iteration 23: "Decrease Method Security" applied at class FindPosition to method FindPosition from private to package
Iteration 24: "Decrease Method Security" applied at class RemoveIf to method RemoveIf from package to protected
Iteration 25: "Make Field Final" applied at class SkippingIterator to LocalVariableDeclaration current
Iteration 26: "Increase Method Security" applied at class TeeIterator to method get from public to protected
Iteration 27: "Decrease Method Security" applied at class SymmetricDifference to method SymmetricDifference from private to package
Iteration 28: "Decrease Field Security" applied at class Not to field p_ from private to package
Iteration 29: "Decrease Method Security" applied at class Collections to method Collections from package to protected

Score has improved overall by 0.036851
Time taken to refactor: 117.91s

======== Final Metric Info ========
Average ratio of private/package/protected attributes to overall attributes per class: 0.452991
Average coupling per class: 0.000000
Average cohesion among methods per class: 0.491424
Average amount of methods per class: 4.307693
Average amount of complexity of methods per class: 18.051283
Average ratio of abstract classes/methods per class: 0.076923
Average inherited referenced methods ratio per class: 0.000000
Average visibility ratio per class: 0.741310
Overall fitness function score: 0.036851